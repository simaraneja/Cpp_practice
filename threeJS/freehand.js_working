var renderer, scene, camera;
var mouse;
var isMouseDown;
var startVertex;
var  count = 0, line;
var drawCount;
var MAX_POINTS = 100;
var material;

init();

function init(){
// renderer
    renderer = new THREE.WebGLRenderer();

    renderer.setSize( window.innerWidth, window.innerHeight );
    document.body.appendChild( renderer.domElement );

    // scene
    scene = new THREE.Scene();

    // camera
    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );
    camera.position.set( 0, 0, 300 );

    //mouse
    mouse = new THREE.Vector3();
    startVertex = new THREE.Vector3();

    // geometry
/*    var geometry = new THREE.BufferGeometry();

    // attributes
    var positions = new Float32Array( MAX_POINTS * 3 ); // 3 vertices per point

   /!*var positions = new Float32Array([
       -10,0,0,
       0,10,0,
       10,0,0
   ]);*!/
   geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

    //
    // drawCount = 2; // draw the first 2 points, only
    // geometry.setDrawRange( 0, drawCount );

    // material
    var material = new THREE.LineBasicMaterial( { color: 0xff0000, linewidth: 2 } );*/

    // line
    /* line = new THREE.Line( geometry,  material );
    scene.add( line ); */

    //addLine(geometry,material);

    render();

    document.addEventListener("mousemove",onMouseMove,false);
    document.addEventListener("mouseup",onMouseUp,false);
    document.addEventListener("mousedown",onMouseDown,false);
}

function render() {

    renderer.render( scene, camera );
    requestAnimationFrame(render);
}


function onMouseUp(){
    console.log("mouse up");
    isMouseDown = false;
    addStartVertexToArray();
    line.geometry.setDrawRange(0, count);
    line.geometry.attributes.position.needsUpdate = true;

}

function onMouseDown(event) {
    console.log("mouse down");
    isMouseDown = true;

    addLine();
    scene.add(line);

    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    mouse.z = 0;
    mouse.unproject(camera);

    startVertex = saveStartVertex();
    addVertexToArray();


}

function onMouseMove(event) {

    if(isMouseDown) {
        //count++;
        console.log("mouse move");
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
        mouse.z = 0;
        mouse.unproject(camera);
        addVertexToArray();
        //updateVertices();
    }
}

function addVertexToArray() {
    var positions = line.geometry.attributes.position.array;
    positions[count * 3 + 0] = mouse.x;
    positions[count * 3 + 1] = mouse.y;
    positions[count * 3 + 2] = mouse.z;
    count++;
    line.geometry.setDrawRange(0, count);
    //console.log(positions);
    line.geometry.attributes.position.needsUpdate = true;
}


function saveStartVertex() {

    var TempVec = new THREE.Vector3();
    TempVec.x = mouse.x; TempVec.y = mouse.y; TempVec.z = mouse.z;
    return TempVec;
    //count++;
}

function addStartVertexToArray(){
    var positions = line.geometry.attributes.position.array;
    positions[count * 3 + 0] = startVertex.x;
    positions[count * 3 + 1] = startVertex.y;
    positions[count * 3 + 2] = startVertex.z;
    count++;
}

function addLine(){

    var geometry = new THREE.BufferGeometry();

    // attributes
    var positions = new Float32Array( MAX_POINTS * 3 ); // 3 vertices per point

    geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

    // material
    var material = new THREE.LineBasicMaterial( { color: 0xff0000, linewidth: 2 } );
    line = new THREE.Line( geometry,  material );

    count = 0;
}